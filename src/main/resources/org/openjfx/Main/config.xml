<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!-- Generated by update4j. Licensed under Apache Software License 2.0
 Above comment gets added on Configuration::write.
 Timestamp is just for reference purposes ("Last updated: 2 weeks ago"). -->
<configuration timestamp="2018-01-16T17:07:14.598Z">

    <!-- Both base uri and path are optional, but every file will have to list absolute locations if missing. -->
    <base uri="http://update4j.org/" path="${app.lib}" />

    <!-- Explicit providers, will use highest Service::version() of not passed. -->
    <provider updateHandler="org.openjfx.${update.handler.class}" launcher="org.openjfx.MainApp"/>

    <!-- Properties can be injected in paths, uri's, handler class name, and other properties using "${prop.name}"; must not be cyclic
     Resolution order: Dynamic properties (injected in code when loaded); Listed Properties - OS Specific; Listed Properties - Non OS;
     System Properties; System Environment Variables; Exception thrown. -->
    <properties>
        <property key="app.name" value="Update4j Demo"/>

        <!-- Automatically resolves to the System property "user.dir". -->
        <property key="app.dir" value="${user.dir}/${app.name}"/>

        <!-- For Windows, this will resolve from System Environment variable "%LOCALAPPDATA%". -->
        <property key="app.lib" value="${LOCALAPPDATA}/${app.name}/lib" os="win"/>

        <!-- And for the rest of the world, resolve to the prevously listed property "app.dir". -->
        <property key="app.lib" value="${app.dir}/lib"/>

        <!-- Why host your dependencies on your own server? -->
        <property key="maven.central" value="https://repo.maven.apache.org/maven2" />

        <!-- Load different handler class by os, with fallback to default class for generic operating systems. -->
        <property key="update.handler.class" value="WindowsUpdateHandler" os="win" />
        <property key="update.handler.class" value="MacUpdateHandler" os="mac" />
        <property key="update.handler.class" value="LinuxUpdateHandler" os="linux" />
        <property key="update.handler.class" value="DefaultUpdateHandler" />

    </properties>

    <!-- All dependecies (even non-jars) should be listed here.
     Uri and path resolution order: Absolute; Relative to base; Exception thrown.
     If no path is given, uri will be used; if no uri is given, path will be used instead. Whole structure, if relative; last part only, if absolute.
     Checksum uses Adler32, in hex form; fast but not collision-proof.
     Only files marked with the classpath attribute will be loaded to the dynamic class path.
     Only files marked with the modulepath attribute will be loaded onto the dynamic module layer on Configuration::launch invocation.
         There are cases where you don't want to load it so it doesn't get locked; like the UpdateHandler provider which will be loaded (on restart; if just updated) on the boot
         layer automatically regradless of the modulepath attribute, IT ONLY AFFECTS MODULES IN THE NEW LAYER.

         Setting modulepath="true" for a non jar file will cause the Java Platform Module System (JPMS) to throw "java.lang.module.FindException: Module format not recognized".

     Comments are just a String the client may use for any purpose, e.g. It might say "restart" to indecate the application should restart if this file was just downloaded.
     Signature is generated by passing a PrivateKey in Configuration.Builder::signer; encoded as Base64. -->
    <files>

        <!-- Path is extracted from uri to exact same directory structure -->
        <!-- Will only be downloaded to Windows machines -->
        <!-- Will be loaded to classpath -->
        <!--<file uri="drive/help/first.jar" checksum="3aad280" size="11253" os="win" classpath="true" comment="restart" signature="QSBkdW1teSBzaWduYXR1cmUsIHlvdSBzaG91bGQgZ2V0IHRoZSByZWFsIG9uZSBieSBwYXNzaW5nIHlvdXIgcHJpdmF0ZSBrZXkgdG8gQ29uZmlndXJhdGlvbi5CdWlsZGVyOjpzaWduZXIu"/>-->

        <!-- Path is extracted from uri, resolving to "second.jar" -->
        <!-- Will be loaded to modulepath -->
        <file uri="http://127.0.0.1:8585/second.jar" checksum="30ff0a" size="4739" modulepath="true" signature="QSBkdW1teSBzaWduYXR1cmUsIHlvdSBzaG91bGQgZ2V0IHRoZSByZWFsIG9uZSBieSBwYXNzaW5nIHlvdXIgcHJpdmF0ZSBrZXkgdG8gQ29uZmlndXJhdGlvbi5CdWlsZGVyOjpzaWduZXIu"/>

        <!-- Uri is extracted from path to exact same directory structure -->
        <!-- Comment hints a potential observer to show some HTML page if this file was currently updated -->
        <file path="/dir/third.jar" checksum="bdcf843" size="4739" modulepath="true" comment="whatsNew=https://example.com/whats-new-third.html" signature="QSBkdW1teSBzaWduYXR1cmUsIHlvdSBzaG91bGQgZ2V0IHRoZSByZWFsIG9uZSBieSBwYXNzaW5nIHlvdXIgcHJpdmF0ZSBrZXkgdG8gQ29uZmlndXJhdGlvbi5CdWlsZGVyOjpzaWduZXIu">
            <addExports>
                <!-- Add exports/opens/reads for files marked with "modulepath" -->
                <exports package="com.mypackage" target="org.somemodule"/>
            </addExports>
        </file>

        <!-- You can use the above listed property to link to maven dependencies -->
        <file uri="${maven.central}/com/google/api/api-common/1.3.0/api-common-1.3.0.jar" checksum="3de33d" size="4739" modulepath="true" signature="QSBkdW1teSBzaWduYXR1cmUsIHlvdSBzaG91bGQgZ2V0IHRoZSByZWFsIG9uZSBieSBwYXNzaW5nIHlvdXIgcHJpdmF0ZSBrZXkgdG8gQ29uZmlndXJhdGlvbi5CdWlsZGVyOjpzaWduZXIu"/>

        <!-- Non jar file must not be loaded to the module path. Default value is false -->
        <file uri="data.bin" checksum="3d95f" size="476" modulepath="false" signature="QSBkdW1teSBzaWduYXR1cmUsIHlvdSBzaG91bGQgZ2V0IHRoZSByZWFsIG9uZSBieSBwYXNzaW5nIHlvdXIgcHJpdmF0ZSBrZXkgdG8gQ29uZmlndXJhdGlvbi5CdWlsZGVyOjpzaWduZXIu"/>
    </files>

</configuration>