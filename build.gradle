plugins {
  id 'application'
  id 'java'
  id 'org.openjfx.javafxplugin' version '0.0.8'
  id 'org.beryx.jlink'               version '2.23.7'
  id 'com.github.ben-manes.versions' version '0.23.0'
}
repositories {
    mavenCentral()
    flatDir { dir 'lib' }
}

dependencies {
    implementation group: 'de.jensd', name: 'fontawesomefx-fontawesome', version: '4.7.0-9.1.2'
    implementation group: 'org.json', name: 'json', version: '20200518'
    implementation group: 'jcifs', name: 'jcifs', version: '1.3.17'
    implementation group: 'com.itextpdf', name: 'itext7-core', version: '7.1.4'
    implementation group: 'com.itextpdf', name: 'kernel', version: '7.1.4'
    implementation group: 'com.itextpdf', name: 'pdfa', version: '7.1.4'
    implementation group: 'com.itextpdf', name: 'io', version: '7.1.4'
    implementation group: 'com.itextpdf', name: 'sign', version: '7.1.4'
    implementation group: 'com.itextpdf', name: 'root', version: '7.1.4'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.60'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.60'
    implementation 'org.update4j:update4j:1.5.6'
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.1")
}

mainClassName = 'org.openjfx.MainApp'
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }

}


def PROPERTIES_FILE = "config.properties"
Properties prop = new Properties();
prop.load(project.rootProject.file(PROPERTIES_FILE).newDataInputStream())

ext {
    appName = "HelloFX"
    appPackaging = "org.openjfx.Main"
}

run {
    args = [
            prop.getProperty("MIME_TYPE")+"://"+prop.getProperty("BACKEND_IP")+":"+prop.getProperty("BACKEND_PORT")+prop.getProperty("BACKEND_ENDPOINT")+"?token=" + prop.getProperty("TOKEN")
    ]
}

task dist {
    dependsOn clean, jlinkZip
    description "Calls clean and then jlinkZip [default]"
}

defaultTasks 'dist'
javafx {
    version = '13'
    modules = [
            'javafx.base',
            'javafx.fxml',
            'javafx.graphics',
            'javafx.controls'
    ]
}

jlink {
    imageZip = project.file("${buildDir}/distributions/${appPackaging}-${javafx.platform.classifier}.zip")
    launcher {
        name = 'firmador'
    }

    options = ['--strip-debug', '--compress', '2',
               '--no-header-files', '--no-man-pages',
               '--output', "${appPackaging}", '--launcher', "launch=org.openjfx/org.openjfx.Main.Start"
    ]
}


test {
    useJUnitPlatform()
    maxHeapSize = '1G'
}


compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

/*


jar {
    targetCompatibility = 11
    sourceCompatibility = 11

    manifest {
        attributes 'Main-Class': 'org.openjfx.MainApp'
    }
    from (configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }

}
task fatJar(type: Jar) {

    manifest {
        attributes 'Main-Class': 'org.openjfx.MainApp'
    }
    String type = "";
    if (System.getProperty("os.name").toLowerCase().contains("linux") ||
            System.getProperty("os.name").toLowerCase().contains("sunos") ||
            System.getProperty("os.name").toLowerCase().contains("solaris")) {
        type = "linux";
    }
    else if (System.getProperty("os.name").toLowerCase().contains("mac os x"))
    {
        type = "mac";
    } else {
        type = "windows";
    }
    baseName = project.name + '-all-' + type
    from  (configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    with jar
}*/
